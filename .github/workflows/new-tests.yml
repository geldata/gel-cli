name: New Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ '**' ]

env:
  CACHE_KEY: 2
  CLITEST_VERSION: "=0.2.0"
  RUST_VERSION: "1.85"
  RUST_COMPONENTS: "cargo,rustc,rust-std,clippy,rustfmt"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, large-win-x64]
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@56f84321dbccf38fb67ce29ab63e4754056677e0
        with:
          components: '${{ env.RUST_COMPONENTS }}'
          targets: 'x86_64-unknown-linux-musl'
          toolchain: '${{ env.RUST_VERSION }}'

      - name: Write .cargo/config.toml
        if: runner.os == 'Windows'
        run: |
          # Use rust-lld as linker for Windows for faster builds
          echo '[target.x86_64-pc-windows-msvc]' > ${{ env.CARGO_HOME }}/config.toml
          echo 'linker = "rust-lld.exe"' >> ${{ env.CARGO_HOME }}/config.toml

          # Use opt-level 1 to avoid smashing the stack with large futures
          echo '[profile.dev]' >> ${{ env.CARGO_HOME }}/config.toml
          echo 'opt-level = 1' >> ${{ env.CARGO_HOME }}/config.toml

      - name: Cache Rust files
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ env.CACHE_KEY }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.CACHE_KEY }}-

      - name: Build
        if: runner.os != 'Linux'
        run: |
          cargo build

      - name: Build (static)
        if: runner.os == 'Linux'
        run: |
          RUSTFLAGS="-C target-feature=+crt-static" cargo build --target=x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/debug/gel target/debug/gel

      - name: Upload artifacts (gel)
        uses: actions/upload-artifact@v4
        with:
          name: debug-gel-cli-${{ runner.os }}
          path: target/debug/gel*
          if-no-files-found: error

  tests:
    needs: build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, large-win-x64]
      fail-fast: false
    env:
      CI: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@56f84321dbccf38fb67ce29ab63e4754056677e0
        with:
          components: '${{ env.RUST_COMPONENTS }}'
          toolchain: '${{ env.RUST_VERSION }}'

      - name: Install clitest from crates.io
        uses: baptiste0928/cargo-install@91c5da15570085bcde6f4d7aed98cb82d6769fd3
        with:
          crate: clitest
          version: '${{ env.CLITEST_VERSION }}'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: debug-*
          path: artifacts

      - name: List artifacts
        if: runner.os != 'Windows'
        run: |
          ls -lR artifacts

      - name: Copy artifacts to PATH
        run: |
          cp artifacts/debug-gel-cli-${{ runner.os }}/gel* ${{ env.CARGO_HOME }}/bin/

      - name: Setup WSL
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--------------------------------"
          echo "wsl --version"
          wsl --version
          echo "--------------------------------"
          echo
          _GEL_WSL_LINUX_BINARY=artifacts/debug-gel-cli-Linux/gel gel cli init-wsl
          echo "_GEL_WSL_SKIP_UPDATE=true" >> $GITHUB_ENV

      - name: Set executable permissions
        if: runner.os != 'Windows'
        run: |
          chmod +x ${{ env.CARGO_HOME }}/bin/*

      - name: Print versions
        run: |
          echo "gel: $(gel --version)"
          echo "clitest: $(clitest --version)"

      - name: Run all CLI tests
        run: |
          find tests/scripts -name "*.cli" -type f | while read -r test_file; do
            test_name=$(basename "$test_file" .cli)
            echo "::group::Running test: $test_name"
            TERM=xterm-256color clitest --timeout 120 "$test_file"
            echo "::endgroup::"
          done
        shell: bash

  dsn-tests:
    needs: build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, large-win-x64]
      fail-fast: false
    env:
      CI: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@56f84321dbccf38fb67ce29ab63e4754056677e0
        with:
          components: '${{ env.RUST_COMPONENTS }}'
          toolchain: '${{ env.RUST_VERSION }}'

      - name: Write .cargo/config.toml
        if: runner.os == 'Windows'
        run: |
          # Use rust-lld as linker for Windows for faster builds
          echo '[target.x86_64-pc-windows-msvc]' > ${{ env.CARGO_HOME }}/config.toml
          echo 'linker = "rust-lld.exe"' >> ${{ env.CARGO_HOME }}/config.toml

          # Use opt-level 1 to avoid smashing the stack with large futures
          echo '[profile.dev]' >> ${{ env.CARGO_HOME }}/config.toml
          echo 'opt-level = 1' >> ${{ env.CARGO_HOME }}/config.toml

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: debug-*
          path: artifacts

      - name: List artifacts
        if: runner.os != 'Windows'
        run: |
          ls -lR artifacts

      - name: Copy artifacts to PATH
        run: |
          cp artifacts/debug-gel-cli-${{ runner.os }}/gel* ${{ env.CARGO_HOME }}/bin/

      - name: Set executable permissions
        if: runner.os != 'Windows'
        run: |
          chmod +x ${{ env.CARGO_HOME }}/bin/*

      - name: Run DSN tests
        run: |
          cargo test -p shared-client-tests
        shell: bash
