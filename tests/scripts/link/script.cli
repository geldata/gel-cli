#!/usr/bin/env clitest --v0

# Functional tests for project linking
# Key:
#   - # <comment>
#   - $ <command>
#   - ? <grok pattern>
#   - ! <literal>
#   - repeat { ... }
#   - option { ... }
#   - ignore { ... }
#   - choice { ... }
#   - unordered { ... }

pattern VERSION (\d+\.\d+(?:\.\d+)?(?:-(?:alpha|beta|rc|dev)\.\d+)?\+(?:[a-f0-9]{7}|local))|\d+\.\d+\.\d+(-dev)?

ignore {
    ? Newer version of gel tool exists %{VERSION} \(current %{VERSION}\). To upgrade run `gel cli upgrade`
    ? WARNING %{GREEDYDATA} postgres: %{GREEDYDATA}
    ? CRITICAL %{GREEDYDATA} postgres: %{GREEDYDATA}
}

$ gel instance destroy -I inst1 --force
%EXIT any
*

$ gel instance destroy -I project2 --force
%EXIT any
*

$ mktemp -d
%SET WORK_DIR
*

$ cp -R ../../proj $WORK_DIR

$ gel --version
? Gel CLI %{VERSION}

$ gel server list-versions
? ┌%{DATA}┬%{DATA}┬%{DATA}┐
? │%{DATA}│%{DATA}│%{DATA}│
repeat {
    choice {
        ? │ stable %{DATA}
        ? │ nightly %{DATA}
        ? │ testing %{DATA}
    }
}
? └%{DATA}┴%{DATA}┴%{DATA}┘

$ gel instance create inst1
ignore {
    ! [edgedb] %{GREEDYDATA}
}
choice {
    sequence {
        ? Downloading package...
        ? %{DATA}
        ? Successfully installed %{VERSION}
    }
    ? Version %{VERSION} is already downloaded
}
! Initializing Gel instance 'inst1'...
optional {
    choice {
        ! Gel will not start on next login. Trying to start database in the background...
        repeat {
            ! [systemctl] Created symlink %{GREEDYDATA}
        }
    }
}
! Instance inst1 is up and running.
! To connect to the instance run:
!   gel -I inst1

$ gel project info --instance-name --project-dir=$WORK_DIR/proj/project1
%EXIT 1
! gel error: Project is not initialized. Run `gel project init`.

$ gel project init --link --server-instance=inst1 --non-interactive --project-dir=$WORK_DIR/proj/project1
! Found `edgedb.toml` in %{GREEDYDATA}
! Linking project...
? WARNING: existing instance has version %{DATA}, but nightly is required by `gel.toml` \(or `edgedb.toml`\)
! Applying migrations...
? Everything is up to date. Revision %{DATA}
! Project linked
! To connect to inst1, navigate to %{GREEDYDATA} and run `gel`

$ gel project info --instance-name --project-dir=$WORK_DIR/proj/project1
! inst1

$ cd $WORK_DIR/proj/project1 && gel query "SELECT 1"
! 1

$ gel project init --non-interactive --project-dir=$WORK_DIR/proj/project2
! No `gel.toml` (or `edgedb.toml`) found in %{DATA} or above
! Initializing new project...
! Checking Gel versions...
? ┌%{GREEDYDATA}┐
repeat {
    ? │%{GREEDYDATA}│
}
? └%{GREEDYDATA}┘
? Version %{VERSION} is already downloaded
! Initializing Gel instance 'project2'...
optional {
    choice {
        ! Gel will not start on next login. Trying to start database in the background...
        repeat {
            ! [systemctl] Created symlink %{GREEDYDATA}
        }
    }
}
! Applying migrations...
! Everything is up to date. Revision initial
! Project initialized.
! To connect to project2, navigate to %{GREEDYDATA} and run `gel`

$ gel project info --instance-name --project-dir=$WORK_DIR/proj/project2
! project2

$ cd $WORK_DIR/proj/project2 && gel query "SELECT 1"
optional {
    ! Connecting to Gel instance %{GREEDYDATA}...
}
! 1

$ gel project upgrade --force --project-dir=$WORK_DIR/proj/project2
ignore {
    ! [systemctl] %{GREEDYDATA}
    ! [edgedb] %{GREEDYDATA}
}
choice {
    sequence {
        ? Version %{VERSION} is already downloaded
        ! The schema is forward compatible. Ready for upgrade.
        ? Upgrading from %{DATA} to incompatible version %{DATA}
    }
    sequence {
        ? Upgrading from %{DATA} to incompatible version %{DATA}
        ? Version %{VERSION} is already downloaded
    }
}
! Dumping the database...
! Starting dump for database `'main'`...
! Restoring the database...
!
? Restoring database from file `%{DATA}`. Total size: %{DATA}
! Restore completed
? Instance project2 successfully upgraded to %{VERSION}

$ cd $WORK_DIR/proj/project2 && gel query "SELECT 1"
optional {
    ! Connecting to Gel instance %{GREEDYDATA}...
}
! 1

$ gel instance destroy --instance=project2 --non-interactive
%EXIT 2
!!!
Instance "project2" is used by the following project:
  %{GREEDYDATA}
If you really want to destroy the instance, run:
  gel instance destroy -I "project2" --force
!!!

$ gel instance destroy --instance=inst1 --non-interactive
%EXIT 2
!!!
Instance "inst1" is used by the following project:
  %{GREEDYDATA}
If you really want to destroy the instance, run:
  gel instance destroy -I "inst1" --force
!!!

$ gel instance destroy --instance=project1 --non-interactive
%EXIT 8
*
! gel error: Could not find Gel instance 'project1'

$ gel instance list
*
? │ local %{GREEDYDATA} inst1 %{GREEDYDATA}
*
? │ local %{GREEDYDATA} project2 %{GREEDYDATA}
*

$ gel instance destroy --instance=project2 --force
!!!
Unlinking %{GREEDYDATA}
Gel instance 'project2' was successfully deleted.
!!!

$ gel instance list
*
? │ local %{GREEDYDATA} inst1 %{GREEDYDATA}
*

$ gel project unlink -D --non-interactive --project-dir=$WORK_DIR/proj/project1

$ gel instance list
*

$ gel project init --non-interactive --project-dir=$WORK_DIR/proj/project2
! Found `gel.toml` in %{DATA}/proj/project2
! Initializing project...
! Checking Gel versions...
? ┌%{GREEDYDATA}┐
repeat {
    ? │%{GREEDYDATA}│
}
? └%{GREEDYDATA}┘
? Version %{VERSION} is already downloaded
! Initializing Gel instance 'project2'...
*
! Applying migrations...
! Everything is up to date. Revision initial
! Project initialized.
! To connect to project2, navigate to %{DATA}/proj/project2 and run `gel`

$ gel project upgrade --to-latest --force --project-dir=$WORK_DIR/proj/project2
choice {
    sequence {
        ? Version %{VERSION} is already downloaded
        ! The schema is forward compatible. Ready for upgrade.
        ? Upgrading from %{DATA} to incompatible version %{DATA}
    }
    sequence {
        ? Upgrading from %{DATA} to incompatible version %{DATA}
        ? Version %{VERSION} is already downloaded
    }
}
! Dumping the database...
! Starting dump for database `'main'`...
optional {
    repeat {
        ! [systemctl] Removed %{DATA}.
    }
}
! Restoring the database...
*
! Restore completed
*
? Instance project2 successfully upgraded to %{VERSION}
? Setting `server-version = "%{DATA}"` in `gel.toml`

$ gel instance status --instance=project2 --extended
! project2:
!   Status: running, pid %{NUMBER}
!   Pid: %{NUMBER}
optional {
    !   Service/Container: exists
}
!   Credentials: exists
!   Version: %{VERSION}
!   Port: %{NUMBER}
!   Data directory: %{DATA}
!   Data status: normal
!   Backup: present, %{DATA}

$ gel instance revert --instance=project2 --no-confirm
*
! Starting Gel %{VERSION}...
*
! Instance project2 is successfully reverted to %{VERSION}

$ gel project unlink -D --non-interactive --project-dir=$WORK_DIR/proj/project2
